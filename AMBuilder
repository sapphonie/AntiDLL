# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys

projectName = 'adlltf2'

sourceFiles = [
  'extension.cpp',
]

project = Extension.HL2Project(builder, projectName + '.ext')

project.sources += sourceFiles

for sdk_name in Extension.sdks:
  sdk = Extension.sdks[sdk_name]
  binary = Extension.HL2Config(project, projectName + '.ext', sdk)
  compiler = binary.compiler

  binary.sources += [
    os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp'),

    os.path.join(Extension.sm_root, 'public', 'CDetour', 'detours.cpp'),
    os.path.join(Extension.sm_root, 'public', 'asm', 'asm.c'),
    os.path.join(Extension.sm_root, 'public', 'libudis86', 'decode.c'),
    os.path.join(Extension.sm_root, 'public', 'libudis86', 'itab.c'),
    os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-att.c'),
    os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-intel.c'),
    os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn.c'),
    os.path.join(Extension.sm_root, 'public', 'libudis86', 'udis86.c'),
  ]

  if (sdk_name == "csgo"):
    binary.sources += [
      os.path.join(sdk.path, 'public', 'engine', 'protobuf', 'netmessages.pb.cc'),
      os.path.join(sdk.path, 'public', 'game', 'shared', 'csgo', 'protobuf', 'cstrike15_usermessages.pb.cc'),
      os.path.join(sdk.path, 'public', 'game', 'shared', 'csgo', 'protobuf', 'cstrike15_usermessage_helpers.cpp'),
    ]

    compiler.cxxincludes += [
      os.path.join(sdk.path, 'common', 'protobuf-2.5.0', 'src'),
      os.path.join(sdk.path, 'public', 'engine', 'protobuf'),
      os.path.join(sdk.path, 'public', 'game', 'shared', 'csgo', 'protobuf'),
      os.path.join(sdk.path, 'public', 'steam'),
      os.path.join(sdk.path, 'game', 'server')
    ]

    if builder.target_platform == 'linux':
      lib_path = os.path.join(sdk.path, 'lib', 'linux32', 'release', 'libprotobuf.a')
    elif builder.target_platform == 'windows':
      lib_path = os.path.join(sdk.path, 'lib', 'win32', 'release', 'vs2017', 'libprotobuf.lib')

    compiler.linkflags.insert(0, binary.Dep(lib_path))


Extension.extensions = builder.Add(project)
